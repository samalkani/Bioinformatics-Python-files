{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Practical_1_Shortest_Common_Superstring","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyPDPz7yXX1x+wsoObHDG2mz"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["### Implementing the Shortest Common Superstring (SCS)"],"metadata":{"id":"dM7Vmqt5A8xq"}},{"cell_type":"markdown","source":["### Overlap Function"],"metadata":{"id":"hoxS_Ha_BLMd"}},{"cell_type":"code","execution_count":2,"metadata":{"id":"H1oECn1oxRPq","executionInfo":{"status":"ok","timestamp":1657291395396,"user_tz":-60,"elapsed":251,"user":{"displayName":"Sasha malkani","userId":"10596222964619627791"}}},"outputs":[],"source":["def overlap(a, b, min_length=3):\n","  \"\"\"Return length of longest suffix of 'a' matching\n","     a prefix of 'b' that is at least 'min_length'\n","     characters long. If no such overlap exists,\n","     return 0.\"\"\"\n","\n","  start = 0  \n","  # find algorithm\n","  while True:\n","    start = a.find(b[:min_length], start)  # start = which index to start search\n","    if start == -1:                # no occurence of this prefix in a\n","      return 0\n","                                   # found the prefix of b in a\n","    if b.startswith(a[start:]):    # prefix of b == suffix starting at \n","                                   # position start                                   \n","      return len(a)-start          # length of overlap\n","    start += 1                     # move past the previous match"]},{"cell_type":"markdown","source":["### Shortest Common Superstring (SCS) Function"],"metadata":{"id":"qDI9aPv5B0b5"}},{"cell_type":"code","execution_count":23,"metadata":{"id":"52xZTocGAwbe","executionInfo":{"status":"ok","timestamp":1657292769538,"user_tz":-60,"elapsed":862,"user":{"displayName":"Sasha malkani","userId":"10596222964619627791"}}},"outputs":[],"source":["import itertools\n","\n","def scs(ss):\n","    shortest_sup = None\n","    for ssperm in itertools.permutations(ss): # for each permutation set of strings\n","      sup = ssperm[0]                         # superstring 1st string in the list\n","      for i in range(len(ss)-1):              # skip 1st string = superstring\n","\n","        # find overlap length between current string and the next one\n","        olen = overlap(ssperm[i], ssperm[i+1], min_length=1)\n","\n","        # Append onto superstring the part of the next string that doesn't \n","        # overlap, i.e. from [olen:] onwards!\n","        sup += ssperm[i+1][olen:]\n","\n","      # Test whether superstring is the shortest.\n","      if shortest_sup is None or len(sup) < len(shortest_sup):\n","\n","          # replace current superstring with current superstring\n","        shortest_sup = sup\n","        \n","    \n","    return shortest_sup\n"]},{"cell_type":"markdown","source":["### Test SCS Function"],"metadata":{"id":"LdtKMNQWHIm-"}},{"cell_type":"code","source":["scs(['ACGGTACGAGC','GAGCTTCGGA', 'GACACGG'])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"j2I49zXWHNhg","executionInfo":{"status":"ok","timestamp":1657292778420,"user_tz":-60,"elapsed":1141,"user":{"displayName":"Sasha malkani","userId":"10596222964619627791"}},"outputId":"d498b667-d4ad-40a3-bd8d-ee0a9c3a981a"},"execution_count":24,"outputs":[{"output_type":"execute_result","data":{"text/plain":["('GACACGGTACGAGCTTCGGA', 20)"]},"metadata":{},"execution_count":24}]}]}