{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Copy of Practical_1_Shortest_Common_Superstring","provenance":[{"file_id":"1TMArZbowKIYXOAqNiJfoO2eU0zC0c9Ag","timestamp":1657292969596}],"collapsed_sections":[],"authorship_tag":"ABX9TyMc1BSAMhe9N9H1O1jQeged"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["### Implementing the Shortest Common Superstring (SCS)"],"metadata":{"id":"dM7Vmqt5A8xq"}},{"cell_type":"markdown","source":["### Overlap Function"],"metadata":{"id":"hoxS_Ha_BLMd"}},{"cell_type":"code","execution_count":2,"metadata":{"id":"H1oECn1oxRPq","executionInfo":{"status":"ok","timestamp":1657293825051,"user_tz":-60,"elapsed":365,"user":{"displayName":"Sasha malkani","userId":"10596222964619627791"}}},"outputs":[],"source":["def overlap(a, b, min_length=3):\n","  \"\"\"Return length of longest suffix of 'a' matching\n","     a prefix of 'b' that is at least 'min_length'\n","     characters long. If no such overlap exists,\n","     return 0.\"\"\"\n","\n","  start = 0  \n","  # find algorithm\n","  while True:\n","    start = a.find(b[:min_length], start)  # start = which index to start search\n","    if start == -1:                # no occurence of this prefix in a\n","      return 0\n","                                   # found the prefix of b in a\n","    if b.startswith(a[start:]):    # prefix of b == suffix starting at \n","                                   # position start                                   \n","      return len(a)-start          # length of overlap\n","    start += 1                     # move past the previous match"]},{"cell_type":"markdown","source":["### Shortest Common Superstring (SCS) Function"],"metadata":{"id":"qDI9aPv5B0b5"}},{"cell_type":"code","execution_count":3,"metadata":{"id":"52xZTocGAwbe","executionInfo":{"status":"ok","timestamp":1657293830224,"user_tz":-60,"elapsed":379,"user":{"displayName":"Sasha malkani","userId":"10596222964619627791"}}},"outputs":[],"source":["import itertools\n","\n","def scs(ss):\n","    shortest_sup = None\n","    for ssperm in itertools.permutations(ss): # for each permutation set of strings\n","      sup = ssperm[0]                         # superstring 1st string in the list\n","      for i in range(len(ss)-1):              # skip 1st string = superstring\n","\n","        # find overlap length between current string and the next one\n","        olen = overlap(ssperm[i], ssperm[i+1], min_length=1)\n","\n","        # Append onto superstring the part of the next string that doesn't \n","        # overlap, i.e. from [olen:] onwards!\n","        sup += ssperm[i+1][olen:]\n","\n","      # Test whether superstring is the shortest.\n","      if shortest_sup is None or len(sup) < len(shortest_sup):\n","\n","          # replace current superstring with current superstring\n","        shortest_sup = sup\n","        \n","    \n","    return shortest_sup\n"]},{"cell_type":"markdown","source":["### Revised Shortest Common Superstring"],"metadata":{"id":"YLElNdzXZ1_t"}},{"cell_type":"code","source":["def revised_scs(ss):\n","    \"\"\" Returns shortest common superstring of given\n","        strings, which must be the same length \"\"\"\n","    shortest_sup = []\n","    for ssperm in itertools.permutations(ss):\n","        sup = ssperm[0]  # superstring starts as first string\n","        for i in range(len(ss)-1):\n","            # overlap adjacent strings A and B in the permutation\n","            olen = overlap(ssperm[i], ssperm[i+1], min_length=1)\n","            # add non-overlapping portion of B to superstring\n","            sup += ssperm[i+1][olen:]\n","        shortest_sup.append(sup)  # found shorter superstring\n","    shortest_len = len(ss) * len(ss[0])\n","    for sup in shortest_sup:\n","        if len(sup) <= shortest_len:\n","            shortest_len = len(sup)\n","\n","    shortest_sup = [sup for sup in shortest_sup if len(sup) == shortest_len]\n","    return list(set(shortest_sup)), shortest_len # return shortest"],"metadata":{"id":"iN1XT4nqZ0rh","executionInfo":{"status":"ok","timestamp":1657294300228,"user_tz":-60,"elapsed":352,"user":{"displayName":"Sasha malkani","userId":"10596222964619627791"}}},"execution_count":14,"outputs":[]},{"cell_type":"markdown","source":["### Test SCS Function"],"metadata":{"id":"LdtKMNQWHIm-"}},{"cell_type":"code","source":["scs(['ACGGTACGAGC','GAGCTTCGGA', 'GACACGG'])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":36},"id":"j2I49zXWHNhg","executionInfo":{"status":"ok","timestamp":1657293835736,"user_tz":-60,"elapsed":450,"user":{"displayName":"Sasha malkani","userId":"10596222964619627791"}},"outputId":"e39ec51b-a089-43f6-ec1d-5a9090cad14d"},"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'GACACGGTACGAGCTTCGGA'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":4}]},{"cell_type":"markdown","source":["### Test Revised_SCS Function"],"metadata":{"id":"WSeV67vNbRQ_"}},{"cell_type":"code","source":["revised_scs(['ABC', 'BCA', 'CAB'])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Rc-rWFmiQkgP","executionInfo":{"status":"ok","timestamp":1657294304398,"user_tz":-60,"elapsed":342,"user":{"displayName":"Sasha malkani","userId":"10596222964619627791"}},"outputId":"53a7daec-acaa-493f-b52a-5f2ea085f3f7"},"execution_count":15,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(['ABCAB', 'CABCA', 'BCABC'], 5)"]},"metadata":{},"execution_count":15}]},{"cell_type":"markdown","source":["### Module 4: Test"],"metadata":{"id":"I19jlpSeRwQX"}},{"cell_type":"markdown","source":["##### Question 1 - Length of Common Shortest Superstring"],"metadata":{"id":"jGPmcTIXdBrE"}},{"cell_type":"code","source":["print(\"The length of the common shortest superstring: \", revised_scs(['CCT','CTT', 'TGC', 'TGG', 'GAT', 'ATT'])[1])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1657295214582,"user_tz":-60,"elapsed":350,"user":{"displayName":"Sasha malkani","userId":"10596222964619627791"}},"outputId":"f478efec-0a6c-41f7-ade0-0b72fe119d3d","id":"oNTcZm8TSDRz"},"execution_count":25,"outputs":[{"output_type":"stream","name":"stdout","text":["The length of the common shortest superstring:  11\n"]}]},{"cell_type":"markdown","source":["##### Question 2 - The Number of different Shortest Common Superstrings (SCS)"],"metadata":{"id":"NMcj6M0addXR"}},{"cell_type":"code","source":["print(\"The list of the different shortest common superstrings: \", revised_scs(['CCT','CTT', 'TGC', 'TGG', 'GAT', 'ATT'])[0])\n","print(\"The number of different shortest common superstrings: \", len(revised_scs(['CCT','CTT', 'TGC', 'TGG', 'GAT', 'ATT'])[0]))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1657295229396,"user_tz":-60,"elapsed":385,"user":{"displayName":"Sasha malkani","userId":"10596222964619627791"}},"outputId":"2244182d-0740-4b25-ab38-11e47bc5a4ef","id":"c2AzuT2-d3YZ"},"execution_count":26,"outputs":[{"output_type":"stream","name":"stdout","text":["The list of the different shortest common superstrings:  ['CCTTGGATTGC', 'GATTGCCTTGG', 'TGCCTTGGATT', 'TGGATTGCCTT']\n","The number of different shortest common superstrings:  4\n"]}]},{"cell_type":"code","source":["import operator\n","\n","\n","def readFastq(filename):\n","    sequences = []\n","    qualities = []\n","    with open(filename) as fh:\n","        while True:\n","            fh.readline()  # skip name line\n","            seq = fh.readline().rstrip()  # read base sequence\n","            fh.readline()  # skip placeholder line\n","            qual = fh.readline().rstrip() # base quality line\n","            if len(seq) == 0:\n","                break\n","            sequences.append(seq)\n","            qualities.append(qual)\n","    return sequences, qualities\n","\n","\n","def smart_overlap_map(reads, k):\n","    olaps = {}\n","    result = {}\n","    for read in reads:\n","        for i in range(len(read)-k+1):\n","            if read[i:i+k] not in olaps:\n","                olaps[read[i:i+k]] = [read]\n","            else:\n","                olaps[read[i:i+k]].append(read)\n","\n","    count = 0\n","    for read in reads:\n","        read_suffix = read[-k:]\n","        for possible_read in olaps[read_suffix]:\n","            if possible_read != read:\n","                olen = overlap(read, possible_read, k)\n","                if olen > 0:\n","                    count += 1\n","                    result[(read, possible_read)] = olen\n","\n","    return result, count\n","\n","\n","def pick_maximal_overlap(reads, k):\n","    \"\"\" Return a pair of reads from the list with a\n","        maximal suffix/prefix overlap >= k.  Returns\n","        overlap length 0 if there are no such overlaps.\"\"\"\n","    reada, readb = None, None\n","    best_olen = 0\n","    for a, b in itertools.permutations(reads, 2):\n","        olen = overlap(a, b, min_length=k)\n","        if olen > best_olen:\n","            reada, readb = a, b\n","            best_olen = olen\n","    return reada, readb, best_olen\n","\n","\n","def smart_greedy_scs(reads, k):\n","    \"\"\" Greedy shortest-common-superstring merge.\n","        Repeat until no edges (overlaps of length >= k)\n","        remain. \"\"\"\n","    pairs_olen, pairs_count = smart_overlap_map(reads, k)\n","    sorted_pairs_olen = sorted(pairs_olen.items(), key=operator.itemgetter(1), reverse=True)\n","    read_a, read_b, olen = sorted_pairs_olen[0][0][0], sorted_pairs_olen[0][0][1], sorted_pairs_olen[0][1]\n","    while olen > 0:\n","        reads.remove(read_a)\n","        reads.remove(read_b)\n","        reads.append(read_a + read_b[olen:])\n","        pairs_olen, pairs_count = smart_overlap_map(reads, k)\n","        if pairs_olen != {}:\n","            sorted_pairs_olen = sorted(pairs_olen.items(), key=operator.itemgetter(1), reverse=True)\n","            read_a, read_b, olen = sorted_pairs_olen[0][0][0], sorted_pairs_olen[0][0][1], sorted_pairs_olen[0][1]\n","        else:\n","            read_a, read_b, olen = pick_maximal_overlap(reads, k)\n","    return ''.join(reads)"],"metadata":{"id":"OZwe7o6Lg7Np","executionInfo":{"status":"ok","timestamp":1657296901702,"user_tz":-60,"elapsed":438,"user":{"displayName":"Sasha malkani","userId":"10596222964619627791"}}},"execution_count":43,"outputs":[]},{"cell_type":"markdown","source":["### Download FASTQ file for mystery virus"],"metadata":{"id":"xNro-U8_hPj6"}},{"cell_type":"code","source":["!wget --no-check https://d28rh4a8wq0iu5.cloudfront.net/ads1/data/ads1_week4_reads.fq"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8VviqGXHhcOX","executionInfo":{"status":"ok","timestamp":1657295741396,"user_tz":-60,"elapsed":2296,"user":{"displayName":"Sasha malkani","userId":"10596222964619627791"}},"outputId":"ac6b41aa-6d36-4a94-ec35-a59db4954b88"},"execution_count":28,"outputs":[{"output_type":"stream","name":"stdout","text":["--2022-07-08 15:55:38--  https://d28rh4a8wq0iu5.cloudfront.net/ads1/data/ads1_week4_reads.fq\n","Resolving d28rh4a8wq0iu5.cloudfront.net (d28rh4a8wq0iu5.cloudfront.net)... 13.225.0.44, 13.225.0.145, 13.225.0.220, ...\n","Connecting to d28rh4a8wq0iu5.cloudfront.net (d28rh4a8wq0iu5.cloudfront.net)|13.225.0.44|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 395781 (387K) [video/m2ts]\n","Saving to: ‘ads1_week4_reads.fq’\n","\n","ads1_week4_reads.fq 100%[===================>] 386.50K   456KB/s    in 0.8s    \n","\n","2022-07-08 15:55:40 (456 KB/s) - ‘ads1_week4_reads.fq’ saved [395781/395781]\n","\n"]}]},{"cell_type":"markdown","source":["### Read FASTQ file"],"metadata":{"id":"WaO-pCFUhwzF"}},{"cell_type":"code","source":["reads_filename = 'ads1_week4_reads.fq'\n","fastq_reads, _ = readFastq(reads_filename)\n","\n","print(fastq_reads[:1])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cPR2ngDch1H5","executionInfo":{"status":"ok","timestamp":1657296910056,"user_tz":-60,"elapsed":345,"user":{"displayName":"Sasha malkani","userId":"10596222964619627791"}},"outputId":"c8e346ba-ce34-4ba8-df5c-245f39c4e1c1"},"execution_count":44,"outputs":[{"output_type":"stream","name":"stdout","text":["['GTCCAGCAGAGCAAGTGATGCGAGAGCTGCCCATCCTCCAACCAGCATGCCCCTAGACATTGACACTGCATCGGAGTCAGGCCAAGATCCGCAGGACAGT']\n"]}]},{"cell_type":"markdown","source":["##### Question 3 - How many \"A's\" are there in the fully, assembled genome?"],"metadata":{"id":"BugoPGEBf7e_"}},{"cell_type":"code","source":["genome = smart_greedy_scs(fastq_reads, 10)\n","print(\"Number of As in the assembled genome:\", genome.count('A'))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BMmrw2dkgp3q","executionInfo":{"status":"ok","timestamp":1657297067113,"user_tz":-60,"elapsed":154818,"user":{"displayName":"Sasha malkani","userId":"10596222964619627791"}},"outputId":"6071b43f-bc4d-437f-8986-fa7266c237de"},"execution_count":45,"outputs":[{"output_type":"stream","name":"stdout","text":["Number of As in the assembled genome: 4633\n"]}]},{"cell_type":"markdown","source":["##### Question 4 - How many \"T's\" are there in the fully, assembled genome from the previous question?"],"metadata":{"id":"bFKeJMafgiKb"}},{"cell_type":"code","source":["print(\"Number of Ts in the assembled genome:\", genome.count('T'))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AyvodV2sgqo-","executionInfo":{"status":"ok","timestamp":1657296876888,"user_tz":-60,"elapsed":351,"user":{"displayName":"Sasha malkani","userId":"10596222964619627791"}},"outputId":"660468fb-7db9-44fb-f995-462e8e046ac7"},"execution_count":41,"outputs":[{"output_type":"stream","name":"stdout","text":["Number of Ts in the assembled genome: 3723\n"]}]}]}